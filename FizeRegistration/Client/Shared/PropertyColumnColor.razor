@using FizeRegistration.Client.Services.HttpService.Contracts
@using FizeRegistration.Shared.DataContracts
@using Newtonsoft.Json
@if (editId == Id)
{
    <div class="input-icons" style="display: flex;">
        @*<i class="fa fa-pen"></i>*@
        <div>
            <input style="width: 85px;height: 30px; border: none;" type="color" value="@ColumnName" @onblur="stopEdit" @oninput="OnColorIdChanged">
            @*<input style="width: 85px;height: 30px; border: none;" type="color" >*@

        </div>
    </div>
}
else
{
    <div class="editable-cell-value-wrap" style="padding-right:24px" @onclick="()=>startEdit(Id,ColumnName)">
        @ColumnName
    </div>
}

@code {
    [Inject] private IFizeHttpService HttpClient { get; set; }

    [Parameter] public string TextOverLabel { get; set; }

    [Parameter] public string ColorId { get; set; }

    [Parameter] public EventCallback<string> ColorIdChanged { get; set; }

    [Parameter] public string ColumnName { get; set; }
    [Parameter] public string Id { get; set; }

    [Parameter] public string TableName { get; set; }

    private StringContent stringContentAgency;
    private string editId;

    private Task OnColorIdChanged(ChangeEventArgs e)
    {
        ColorId = e.Value.ToString();
        ColumnName = e.Value.ToString();

        return ColorIdChanged.InvokeAsync(ColorId);
    }
    void startEdit(string id, string agencyName)
    {
        editId = id;
    }
    void stopEdit()
    {
        editId = null;
        ChangeValueTableContract change = new ChangeValueTableContract();
        change.ColumnName = TableName;
        change.ValueInTable = ColumnName;
        change.Id = Id;
        var tableFilter = JsonConvert.SerializeObject(change);

        stringContentAgency = new StringContent(tableFilter);
        var formDataLogo = new MultipartFormDataContent();
        formDataLogo.Add(stringContentAgency, "changeContract");
        var responce = HttpClient.ChangeColumnValue(formDataLogo);
    }
      }