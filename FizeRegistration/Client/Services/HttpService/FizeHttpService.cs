using System.Net.Http.Headers;
using System.Net.Http.Json;
using Blazored.LocalStorage;
using FizeRegistration.Client.Services.HttpService.Contracts;
using FizeRegistration.Shared.DataContracts;
using FizeRegistration.Shared.ResponseContracts;

namespace FizeRegistration.Client.Services.HttpService;

public class FizeHttpService : IFizeHttpService
{
    private HttpClient _httpClient;
    private ILocalStorageService _localStorage;

    public FizeHttpService(HttpClient httpClient, ILocalStorageService localStorage)
    {
        _httpClient = httpClient;
        _localStorage = localStorage;
    }

    public Uri? GetBaseAddress()
    {
        return _httpClient?.BaseAddress;
    }

    public async Task SetHeader()
    {
        try
        {
            var token = await _localStorage.GetItemAsync<TokenDataContract>("token");

            _httpClient.DefaultRequestHeaders.Authorization = null;

            if (!String.IsNullOrWhiteSpace(token.Token))
            {
                _httpClient.DefaultRequestHeaders.Authorization =
                new AuthenticationHeaderValue("Bearer", token.Token.Replace("\"", ""));
            }
        }

        catch
        {

        }
    }

    public async Task<IWebResponse> SendEmailForSignUp(UserEmailDataContract userEmail)
    {
        try
        {
            var response = await _httpClient.PostAsJsonAsync<UserEmailDataContract>(
                "/api/v1/identity/issue/confirmation", userEmail);

            if (response.IsSuccessStatusCode)
            {
                var successfulResponse = await response.Content.ReadFromJsonAsync<SuccessResponse>();

                ArgumentNullException.ThrowIfNull(successfulResponse, nameof(successfulResponse));

                return successfulResponse;
            }

            var errorResponse = await response.Content.ReadFromJsonAsync<ErrorResponse>();

            ArgumentNullException.ThrowIfNull(errorResponse, nameof(errorResponse));

            return errorResponse;
        }

        catch
        {
            var errorResponse = new ErrorResponse
            {
                Body = new Object(),
                Message = "Autogenerated error",
                StatusCode = System.Net.HttpStatusCode.BadRequest
            };

            return errorResponse;
        }

    }
}
